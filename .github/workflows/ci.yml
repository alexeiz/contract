name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build-and-test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        build-type: [Debug, RelWithDebInfo]

    steps:
    - uses: actions/checkout@v4

    - name: Install dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y ninja-build gcc g++

    - name: Install dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install ninja

    - name: Install dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        choco install ninja

    - name: Setup CMake
      uses: jwlawson/actions-setup-cmake@v2
      with:
        cmake-version: '3.28'

    - name: Configure CMake (Linux/macOS)
      if: matrix.os != 'windows-latest'
      run: |
        if [ "${{ matrix.build-type }}" = "Debug" ]; then
          cmake --preset=default
        else
          cmake --preset=release
        fi

    - name: Configure CMake (Windows)
      if: matrix.os == 'windows-latest'
      shell: cmd
      run: |
        if "${{ matrix.build-type }}"=="Debug" (
          cmake -B build -G "Visual Studio 17 2022" -DCMAKE_BUILD_TYPE=Debug
        ) else (
          cmake -B build -G "Visual Studio 17 2022" -DCMAKE_BUILD_TYPE=RelWithDebInfo
        )

    - name: Build (Linux/macOS)
      if: matrix.os != 'windows-latest'
      run: |
        if [ "${{ matrix.build-type }}" = "Debug" ]; then
          cmake --build --preset=default
        else
          cmake --build --preset=release
        fi

    - name: Build (Windows)
      if: matrix.os == 'windows-latest'
      run: cmake --build build --config ${{ matrix.build-type }}

    - name: Test (Linux/macOS)
      if: matrix.os != 'windows-latest'
      run: |
        if [ "${{ matrix.build-type }}" = "Debug" ]; then
          ctest --preset=default --output-on-failure
        else
          ctest --preset=release --output-on-failure
        fi

    - name: Test (Windows)
      if: matrix.os == 'windows-latest'
      run: ctest --test-dir build -C ${{ matrix.build-type }} --output-on-failure
